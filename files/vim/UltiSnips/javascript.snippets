priority 50

snippet file_write "Write inside a file" b
require('fs').writeFile('${1:/tmp/tmp.txt}', ${2:'test'}, (${0:err}) => {
    console.error($0)
})
endsnippet

snippet file_read "Reads a whole file content" b
const fs = require('fs');

fs.readFile('${1:./my_file.txt}', {encoding: 'utf-8'}, (err, data) => {
    if (err) throw err;
    ${2:console.log('received data: ' + data)};
    $0
});
endsnippet

snippet http_get "GET HTTP request" b
const https = require('https');

https.get('${1:http://my_link.com}', resp => {
  let data = '';
  resp.on('data', (chunk) => { data += chunk; });
  resp.on('end', () => {
    ${2:console.log(JSON.parse(data))};
  });

}).on("error", err => {
    throw(err)
});
endsnippet


snippet express_init "Creates an express server" b
const express = require('express');
const app = express();

app.get('/users/:id(\\d+)', function (req, res) {
   res.send('Hello ' + req.params.id);
})

var server = app.listen(8000, function () {
   var host = server.address().address
   var port = server.address().port
   
   console.log("Express server listening on http://%s:%s", host, port)
})
endsnippet


snippet logObject "Logs an object" b
console.log(require('util').inspect(${0:my_object}, /*show_hidden*/false, /*depth*/4, /*colorize*/true));
endsnippet

snippet logg "Logs a message" b
console.log($0);
endsnippet

snippet log "Logs a message" b
console.log('${1/^(?:.*\.)?(\w*)(\(.*)?$/$1/}', $1)
endsnippet

snippet err "Logs an error" b
console.error(${1:{'${2/^(.*\.)?(\w+)(\(.*\))?$/$2/}': ${0:${2:var}}}});
endsnippet

snippet time "Sets up a timer" b
console.time('$1');
console.timeEnd('${1:test}');
endsnippet

snippet forof "iterate" b
for (const ${1:kid} of ${2:dad}) {
    ${0:console.log($1);}
}
endsnippet

snippet forobj "iterate" b
for (const ${1:key} of Object.keys(${2:dad})) {
    const ${3:kid} = $2[$1];
    ${0:console.log($3);}
}
endsnippet
