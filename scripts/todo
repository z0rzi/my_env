#!/bin/python3

from __future__ import print_function

import re
from datetime import datetime
from datetime import date
from notion.client import NotionClient

import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

RED = '\033[91m'
GREEN = '\033[92m'
ORANGE = '\033[93m'
BLUE = '\033[94m'
GRAY = '\033[90m'
NC = '\033[00m'

NOTION_TOKEN = '23546597c2d2df8e8de5bff7101e5b43befabaa1dd42ecb7b4ebb291ec5e34910f96626f0e40a0bbb324e1d505c0dcb609ae29eccf74f30c0816e9d02b7e3dd9ae8f365fca5cd904e66ad3932777'
NOTION_PAGE = 'https://www.notion.so/a7beed21b83041858bb722b443e61860?v=bda3670612a44686b566c25c723d3868'

def writeInBox(icon, text, minWidth=-1):
    icon = '{0:<2}'.format(icon);
    width = len( re.sub('\\033\[\d\dm', '', text) ) + 4
    if minWidth > 0 and width < minWidth:
        width = minWidth

    out = GRAY + '┌' + '─' * (width+3) + '┐\r\n'
    out += '│ ' + NC + icon + GRAY + '┇ ' + NC + text + GRAY + ' │\r\n'
    out += '╰' + '─' * (width+3) + '╯\r\n'

    return out
    

def isSameDay(date1, date2):
    return date1.year == date2.year and \
        date1.month == date2.month and \
        date1.day == date2.day

def notion_to_str(elem):
    out = '\r\n'
    if elem.type == 'page':
        pass
    elif elem.type == 'divider':
        out += GRAY + '───────────────────────────────────────────────────────────────────────────────────────────' + NC


    elif elem.type == 'sub_header' or elem.type == 'header':
        out += re.sub('[`_*]', '', BLUE + elem.title + NC)

    elif elem.type == 'to_do':
        if elem.checked is True:
            out += GRAY + '[✓] '
        else:
            out += '[ ] '

        out += elem.title + NC

    elif elem.type == 'text':
        out += elem.title
    elif elem.type == 'bulleted_list':
        out += ' ◉  ' + elem.title

    elif elem.type == 'bookmark':
        # out += '🔗 ' + elem.title + GRAY + '  -  [' + elem.link + ']' + NC
        out += writeInBox('🔗', elem.title + GRAY + '  -  [' + elem.link + ']' + NC)

    else:
        print('Unsupported format - ' + elem.type)

    if hasattr(elem, 'children') and len(elem.children) > 0:
        out += ''.join([re.sub('\n', '\n  ', notion_to_str(kid)) for kid in elem.children])

    return re.sub('\n', '\n  ', out)

now = datetime.now()

#
# NOTION
#

print('\r\n\r\n\t\t{}Notion{}'.format(RED, NC))

notionCli = NotionClient(token_v2=NOTION_TOKEN)
page = notionCli.get_block(NOTION_PAGE)
col = notionCli.get_collection(page.collection.id)
all_rows = col.get_rows(search="")

for row in all_rows:
    if row.Planned_For is not None:
        if type(row.Planned_For.start) != type(now):
            start = datetime.combine(row.Planned_For.start, datetime.min.time())
        else:
            start = row.Planned_For.start

        if row.Planned_For.end is not None:
            if type(row.Planned_For.end) != type(now):
                end = datetime.combine(row.Planned_For.end, datetime.max.time())
            else:
                end = row.Planned_For.end

            if not start < now < end:
                continue
        else:
            if not isSameDay(now, row.Planned_For.start):
                continue

    else:
        if not isSameDay(now, row.Created):
            continue

    print(notion_to_str(row))




#
# GOOGLE CALENDAR
#

print('\r\n\r\n\r\n\r\n\t\t{}Google Events{}\r\n'.format(RED, NC))

# If modifying these scopes, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

PICKLE_PATH = '/home/zorzi/.my_env/files/CalendarToken.pickle'

CALENDARS = [
    'baptiste.zorzi@gmail.com',
    'khnoel3iem4ucs7rbh4oum37k8@group.calendar.google.com',     # To Do
    '8lca4lncjpgc3t3ic1hcpgrnog@group.calendar.google.com',     # Birthdays
    'asyncy.com_m4j77tl2radbr2iuf0eat8drcs@group.calendar.google.com',     # Work
]


"""Shows basic usage of the Google Calendar API.
Prints the start and name of the next 10 events on the user's calendar.
"""
creds = None
# The file token.pickle stores the user's access and refresh tokens, and is
# created automatically when the authorization flow completes for the first
# time.
if os.path.exists(PICKLE_PATH):
    with open(PICKLE_PATH, 'rb') as token:
        creds = pickle.load(token)
# If there are no (valid) credentials available, let the user log in.
if not creds or not creds.valid:
    if creds and creds.expired and creds.refresh_token:
        creds.refresh(Request())
    else:
        flow = InstalledAppFlow.from_client_secrets_file(
            '/home/zorzi/.my_env/files/CalendarCredentials.json', SCOPES)
        creds = flow.run_local_server(port=0)
    # Save the credentials for the next run
    with open(PICKLE_PATH, 'wb') as token:
        pickle.dump(creds, token)

# Call the Calendar API
# now = datetime.utcnow().isoformat() + 'Z' # 'Z' indicates UTC time
beg = datetime.combine(date.today(), datetime.min.time())
end = datetime.combine(date.today(), datetime.max.time())

beg = beg.isoformat() + 'Z'
end = end.isoformat() + 'Z'

service = build('calendar', 'v3', credentials=creds)
for cid in CALENDARS:
    events_result = service.events().list(calendarId=cid, timeMin=beg, timeMax=end,
                                          maxResults=10, singleEvents=True,
                                          orderBy='startTime').execute()
    events = events_result.get('items', [])

    for event in events:
        start = datetime.fromisoformat(event['start'].get('dateTime', event['start'].get('date')))
        if start.hour != 0:
            start_str = start.strftime('%A %H:%M')
        else:
            start_str = start.strftime('%A')

        padding = 20

        out = GREEN + ' '*(padding-len(start_str)) + start_str + GRAY + '  -  ' + NC

        sep = '───────────'
        sep = ' '*(padding-len(sep)) + sep + '─╼◉╾─' + sep
        print(GRAY + sep + NC)
        print(out + event['summary'])
