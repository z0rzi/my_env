#!/bin/bun
// vim: set filetype=typescript:

import kleur from "kleur";
import prompts from "prompts";
import { cmd, sourceCmd } from "./shell";
import path from "path";
import fs from "fs";

const FILE = path.join(process.env["HOME"] || "~", "installed-packages.json");

type PackageRecord = {
  packages: string[];
  reason: string;
  timestamp: number;
};

function readRecords(): PackageRecord[] {
  try {
    const rawRecords = fs.readFileSync(FILE, "utf-8");
    return JSON.parse(rawRecords);
  } catch (err) {
    // there was an error reading the file... Probably it didn't exist yet.
    fs.writeFileSync(FILE, "[]");
    return [];
  }
}

function setRecords(records: PackageRecord[]) {
  fs.writeFileSync(FILE, JSON.stringify(records));
}

function addRecord(packages: string[], reason: string) {
  const data = readRecords();
  data.push({ packages, reason, timestamp: Date.now() });
  setRecords(data);
}

async function getAllAvailablePackages(name: string) {
  const raw = await cmd("apt-cache search --names-only " + name);
  return raw.split("\n").map((line) => {
    const [name, description] = line.split(" - ");
    return { name, description };
  });
}

async function installPackages(packages: string[]) {
  if (packages.length === 0) {
    console.error("No packages provided");
    process.exit(1);
  }

  for (const pkgName of packages) {
    const allPackages = await getAllAvailablePackages(pkgName);
    if (!allPackages.some((pkg) => pkg.name === pkgName)) {
      console.error("Package not found:", pkgName);
      process.exit(1);
    }
  }

  let plural = false;
  if (packages.length > 1) {
    plural = true;
  }

  const res = await prompts([
    {
      type: "text",
      name: "reason",
      initial: "",
      message:
        "Why are you installing " +
        (plural ? "these packages" : "this package?"),
    }
  ]);

  console.log();

  console.log("Installing packages ", packages.join(", "));

  sourceCmd("sudo", ["apt", "install", "-y", ...packages]);

  addRecord(packages, res.reason);
}

function displayRecords(records: PackageRecord[]) {
  let maxLength = Math.max(
    ...records.map((record) => record.packages.join(", ").length)
  );
  if (maxLength > 30) {
    maxLength = 30;
  }

  for (const record of records) {
    const packageNames = record.packages
      .join(", ")
      .slice(0, maxLength)
      .padEnd(maxLength, " ");

    const date = new Date(record.timestamp).toISOString().slice(0, 10);

    console.log(
      kleur.italic(kleur.gray("[" + date + "]")) +
        "  " +
        kleur.bold(kleur.green(packageNames)) +
        "  " +
        record.reason
    );
  }
}

async function removePackages(packages: string[]) {
  const records = readRecords();

  for (const pkgName of packages) {
    const recordsWithPackage = records.filter((record) =>
      record.packages.includes(pkgName)
    );

    displayRecords(recordsWithPackage);

    for (const record of recordsWithPackage) {
      record.packages = record.packages.filter((pkg) => pkg !== pkgName);
      if (record.packages.length === 0) {
        records.splice(records.indexOf(record), 1);
      }
    }
  }

  setRecords(records);

  sourceCmd("sudo", ["apt", "remove", ...packages]);
}

const mode = process.argv[2];

if (mode === "install") {
  await installPackages(process.argv.slice(3));
} else if (mode === "remove") {
  await removePackages(process.argv.slice(3));
} else if (mode === "list") {
  const records = readRecords();

  displayRecords(records);
}
